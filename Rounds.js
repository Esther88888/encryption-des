function Rounds(L,R,subk){// دالة "Rounds" لمعالجة جزء من البيانات المشفرة مع جولة معينة
     var EP=[    // 1. عملية التمديد Expansion
        // مصفوفة التمديد من 32 إلى 48 بت باستخدام جدول محدد
        32,1,2,3,4,5,
        4,5,6,7,8,9,
        8,9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32,1
     ]
        var resep="";    // تمديد النص الأيمن R إلى 48 بت وفقًا للجدول EP
         var j=0;
        for(j=0;j<48;j++){
            var m=EP[j];
            resep+=R[m-1];
        }
        var resxor="";  // 2. تطبيق XOR بين النص الممتد والمفتاح الجزئي subk
        for(j=0;j<48;j++)
        {
            resxor+=resep[j]^subk[j];
        } // 3. حساب قيمة الصناديق الفرعية S-Boxes
        // الصناديق S-Boxes (من S1 إلى S8) مع قيم محددة لتحويل 6 بتات إلى 4 بتات
        var box1=[
            [14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
            [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
            [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
            [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]
    ]
    var box2=[
            [15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
            [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
            [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
            [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]
    ]
    var box3=[
            [10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
            [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
            [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
            [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]
    ]
    var box4=[
            [7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
            [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
            [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
            [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]
    ]
    var box5=[
            [2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
            [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
            [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
            [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]
    ]
    var box6=[
            [12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
            [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
            [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
            [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]
    ]
    var box7=[
            [4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
            [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
            [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
            [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]
    ]
    var box8=[
            [13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
            [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
            [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]
    ]
        var p1=resxor.slice(0,6); // تقسيم النص الناتج عن XOR إلى مجموعات من 6 بتات
        var p2=resxor.slice(6,12);
        var p3=resxor.slice(12,18);
        var p4=resxor.slice(18,24);
        var p5=resxor.slice(24,30);
        var p6=resxor.slice(30,36);
        var p7=resxor.slice(36,42);
        var p8=resxor.slice(42,48);
          // حساب إحداثيات x و y لكل جزء باستخدام البتات الطرفية والوسطى
    // (px و py لكل مجموعة من البتات)
       var px1=p1[0]+p1[5];
       var py1=p1.slice(1,5);
       var px2=p2[0]+p2[5];
       var py2=p2.slice(1,5);
       var px3=p3[0]+p3[5];
       var py3=p3.slice(1,5);
       var px4=p4[0]+p4[5];
       var py4=p4.slice(1,5);
       var px5=p5[0]+p5[5];
       var py5=p5.slice(1,5);
       var px6=p6[0]+p6[5];
       var py6=p6.slice(1,5);
       var px7=p7[0]+p7[5];
       var py7=p7.slice(1,5);
       var px8=p8[0]+p8[5];
       var py8=p8.slice(1,5);
   var xbox=[px1,px2,px3,px4,px5,px6,px7,px8];// يقوم بتجميع الأجزاء العلوية والسفلية في جدول القيم الذي سيحدد من خلاله قيمة x و y لكل جزء
  var  ybox=[py1,py2,py3,py4,py5,py6,py7,py8];
       var resbox=[[],[],[],[],[],[],[],[]];// يقوم بتهيئة مصفوفة لحفظ نتائج x و y لكل صندوق
       var x=0;
       for(t=0;t<8;t++){// يقوم بتحديد قيمة x (الصف) لكل عنصر من xbox ويخزنها في resbox
       switch(xbox[t]){
        case "00":
           resbox[t][0]=0;
           break;
           case "01":
           resbox[t][0]=1;break;
            case "10": 
            resbox[t][0]=2;break;
            case "11":
            resbox[t][0]=3;break;
       }
       switch(ybox[t]){// يقوم بتحديد قيمة y (العمود) لكل عنصر من ybox ويخزنها في resbox
        case "0000":
           resbox[t][1]=0;
           break;
           case "0001":
           resbox[t][1]=1;break;
            case "0010": 
            resbox[t][1]=2;break;
            case "0011":
            resbox[t][1]=3;break;
                case "0100":
                resbox[t][1]=4;
           break;
           case "0101":
           resbox[t][1]=5;break;
            case "0110": 
            resbox[t][1]=6;break;
            case "0111":
            resbox[t][1]=7;break;
                case "1000":
                resbox[t][1]=8;
           break;
           case "1001":
            resbox[t][1]=9;break;
            case "1010": 
            resbox[t][1]=10;break;
            case "1011":
            resbox[t][1] =11;break;
                case "1100":
                resbox[t][1]=12;
           break;
           case "1101":
           resbox[t][1]=13;break;
            case "1110": 
            resbox[t][1]=14;break;
            case "1111":
            resbox[t][1]=15;break;
       }}
       var fbox=[];// يخزن النتائج من مربعات الاستبدال (S-boxes) في مصفوفة fbox
        fbox[0]= box1[resbox[0][0]][resbox[0][1]];
        fbox[1]= box2[resbox[1][0]][resbox[1][1]];
        fbox[2]= box3[resbox[2][0]][resbox[2][1]];
        fbox[3]= box4[resbox[3][0]][resbox[3][1]];
        fbox[4]= box5[resbox[4][0]][resbox[4][1]];
        fbox[5]= box6[resbox[5][0]][resbox[5][1]];
        fbox[6]= box7[resbox[6][0]][resbox[6][1]];
        fbox[7]= box8[resbox[7][0]][resbox[7][1]];
        var resultbox=[];// يقوم بتحويل القيم العددية في fbox إلى تمثيلها الثنائي من 4 بتات وتخزينها في resultbox
       for(q=0;q<8;q++){
        switch(fbox[q]){
            case 0:
                resultbox[q]="0000";break;
                case 1:
                resultbox[q]="0001";break;
                case 2:
                resultbox[q]="0010";break;
                case 3:
                resultbox[q]="0011";break;    
                case 4:
                resultbox[q]="0100";break;
                case 5:
                resultbox[q]="0101";break;
                case 6:
                resultbox[q]="0110";break;
                case 7:
                resultbox[q]="0111";break;
                case 8:
                resultbox[q]="1000";break;
                case 9:
                resultbox[q]="1001";break;
                case 10:
                resultbox[q]="1010";break;
                case 11:
                resultbox[q]="1011";break;
                case 12:
                resultbox[q]="1100";break;
                case 13:
                resultbox[q]="1101";break;
                case 14:
                resultbox[q]="1110";break;
                case 15:
                resultbox[q]="1111";break;
        }
    }
    var finalsbox="";// يجمع النتائج الثنائية النهائية لجميع مربعات الاستبدال في سلسلة واحدة
    for(s=0;s<8;s++){
finalsbox+=resultbox[s];}
        var P=[// يتم تطبيق التبديل النهائي باستخدام مصفوفة P وتخزين النتيجة في resp
            16,7,20,21,
            29,12,28,17,
            1,15,23,26,
            5,18,31,10,
            2,8,24,14,
            32,27,3,9,
            19,13,30,6,
            22,11,4,25
        ]
        var resp="";
         j=0;
        for(j=0;j<32;j++){
            var l=P[j];
            resp+=finalsbox[l-1];
        }
        var finalR="";
        for(j=0;j<32;j++)
        {// إجراء XOR مع النصف الأيسر وإرجاع النتيجة
            finalR+=resp[j]^L[j];
        }
        

return finalR;
}